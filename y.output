Grammar

    0 $accept: pgm $end

    1 pgm: gl_dec fn_def main_fn

    2 gl_dec: DECL gdec_list ENDDECL

    3 gdec_list: gdec_stat gdec_list
    4          | /* empty */

    5 gdec_stat: type gid_list ';'

    6 type: INTEGER
    7     | BOOLEAN

    8 gid_list: gid_list ',' gid
    9         | gid

   10 gid: ID
   11    | ID '[' NUM ']'
   12    | ID '(' arg_list ')'

   13 fn_def: type ID '(' arg_list ')' '{' l_dec body '}'

   14 main_fn: INTEGER MAIN '(' ')' '{' l_dec body '}'

   15 arg_list: arg ';' arg_list
   16         | /* empty */

   17 arg: arg_type id_list

   18 arg_type: INTEGER
   19         | BOOLEAN

   20 id_list: ID
   21        | '&' ID
   22        | ID ',' id_list
   23        | '&' ID ',' id_list

   24 l_dec: DECL ldec_list ENDDECL

   25 ldec_list: ldec_stat ldec_list
   26          | /* empty */

   27 ldec_stat: type var_list ';'

   28 var_list: ID
   29         | var_list ',' ID

   30 body: BGN slist END

   31 slist: slist stmt
   32      | stmt

   33 stmt: ID '=' expr ';'
   34     | ID '[' expr ']' '=' expr ';'
   35     | READ '(' ID ')' ';'
   36     | READ '(' ID '[' expr ']' ')' ';'
   37     | WRITE '(' expr ')' ';'
   38     | IF '(' expr ')' THEN slist ENDIF ';'
   39     | IF '(' expr ')' THEN slist ELSE slist ENDIF ';'
   40     | WHILE '(' expr ')' DO slist ENDWHILE ';'

   41 act_par: '&' ID
   42        | expr
   43        | '&' ID ',' act_par
   44        | expr ',' act_par

   45 expr: ID
   46     | ID '[' expr ']'
   47     | ID '(' act_par ')'
   48     | NUM
   49     | '-' NUM
   50     | TRUE
   51     | FALSE
   52     | expr '+' expr
   53     | expr '-' expr
   54     | expr '*' expr
   55     | expr '/' expr
   56     | expr '%' expr
   57     | '(' expr ')'
   58     | expr '>' expr
   59     | expr '<' expr
   60     | expr LE expr
   61     | expr GE expr
   62     | expr EQ expr
   63     | expr NE expr
   64     | expr AND expr
   65     | expr OR expr
   66     | NOT expr


Terminals, with rules where they appear

$end (0) 0
'%' (37) 56
'&' (38) 21 23 41 43
'(' (40) 12 13 14 35 36 37 38 39 40 47 57
')' (41) 12 13 14 35 36 37 38 39 40 47 57
'*' (42) 54
'+' (43) 52
',' (44) 8 22 23 29 43 44
'-' (45) 49 53
'/' (47) 55
';' (59) 5 15 27 33 34 35 36 37 38 39 40
'<' (60) 59
'=' (61) 33 34
'>' (62) 58
'[' (91) 11 34 36 46
']' (93) 11 34 36 46
'{' (123) 13 14
'}' (125) 13 14
error (256)
NUM (258) 11 48 49
ID (259) 10 11 12 13 20 21 22 23 28 29 33 34 35 36 41 43 45 46 47
UMINUS (260)
READ (261) 35 36
WRITE (262) 37
IF (263) 38 39
THEN (264) 38 39
ELSE (265) 39
ENDIF (266) 38 39
WHILE (267) 40
DO (268) 40
ENDWHILE (269) 40
DECL (270) 2 24
ENDDECL (271) 2 24
INTEGER (272) 6 14 18
BOOLEAN (273) 7 19
TRUE (274) 50
FALSE (275) 51
BGN (276) 30
END (277) 30
MAIN (278) 14
NE (279) 63
LE (280) 60
GE (281) 61
EQ (282) 62
OR (283) 65
AND (284) 64
NOT (285) 66


Nonterminals, with rules where they appear

$accept (48)
    on left: 0
pgm (49)
    on left: 1, on right: 0
gl_dec (50)
    on left: 2, on right: 1
gdec_list (51)
    on left: 3 4, on right: 2 3
gdec_stat (52)
    on left: 5, on right: 3
type (53)
    on left: 6 7, on right: 5 13 27
gid_list (54)
    on left: 8 9, on right: 5 8
gid (55)
    on left: 10 11 12, on right: 8 9
fn_def (56)
    on left: 13, on right: 1
main_fn (57)
    on left: 14, on right: 1
arg_list (58)
    on left: 15 16, on right: 12 13 15
arg (59)
    on left: 17, on right: 15
arg_type (60)
    on left: 18 19, on right: 17
id_list (61)
    on left: 20 21 22 23, on right: 17 22 23
l_dec (62)
    on left: 24, on right: 13 14
ldec_list (63)
    on left: 25 26, on right: 24 25
ldec_stat (64)
    on left: 27, on right: 25
var_list (65)
    on left: 28 29, on right: 27 29
body (66)
    on left: 30, on right: 13 14
slist (67)
    on left: 31 32, on right: 30 31 38 39 40
stmt (68)
    on left: 33 34 35 36 37 38 39 40, on right: 31 32
act_par (69)
    on left: 41 42 43 44, on right: 43 44 47
expr (70)
    on left: 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62
    63 64 65 66, on right: 33 34 36 37 38 39 40 42 44 46 52 53 54 55
    56 57 58 59 60 61 62 63 64 65 66


state 0

    0 $accept: . pgm $end

    DECL  shift, and go to state 1

    pgm     go to state 2
    gl_dec  go to state 3


state 1

    2 gl_dec: DECL . gdec_list ENDDECL

    INTEGER  shift, and go to state 4
    BOOLEAN  shift, and go to state 5

    $default  reduce using rule 4 (gdec_list)

    gdec_list  go to state 6
    gdec_stat  go to state 7
    type       go to state 8


state 2

    0 $accept: pgm . $end

    $end  shift, and go to state 9


state 3

    1 pgm: gl_dec . fn_def main_fn

    INTEGER  shift, and go to state 4
    BOOLEAN  shift, and go to state 5

    type    go to state 10
    fn_def  go to state 11


state 4

    6 type: INTEGER .

    $default  reduce using rule 6 (type)


state 5

    7 type: BOOLEAN .

    $default  reduce using rule 7 (type)


state 6

    2 gl_dec: DECL gdec_list . ENDDECL

    ENDDECL  shift, and go to state 12


state 7

    3 gdec_list: gdec_stat . gdec_list

    INTEGER  shift, and go to state 4
    BOOLEAN  shift, and go to state 5

    $default  reduce using rule 4 (gdec_list)

    gdec_list  go to state 13
    gdec_stat  go to state 7
    type       go to state 8


state 8

    5 gdec_stat: type . gid_list ';'

    ID  shift, and go to state 14

    gid_list  go to state 15
    gid       go to state 16


state 9

    0 $accept: pgm $end .

    $default  accept


state 10

   13 fn_def: type . ID '(' arg_list ')' '{' l_dec body '}'

    ID  shift, and go to state 17


state 11

    1 pgm: gl_dec fn_def . main_fn

    INTEGER  shift, and go to state 18

    main_fn  go to state 19


state 12

    2 gl_dec: DECL gdec_list ENDDECL .

    $default  reduce using rule 2 (gl_dec)


state 13

    3 gdec_list: gdec_stat gdec_list .

    $default  reduce using rule 3 (gdec_list)


state 14

   10 gid: ID .
   11    | ID . '[' NUM ']'
   12    | ID . '(' arg_list ')'

    '['  shift, and go to state 20
    '('  shift, and go to state 21

    $default  reduce using rule 10 (gid)


state 15

    5 gdec_stat: type gid_list . ';'
    8 gid_list: gid_list . ',' gid

    ';'  shift, and go to state 22
    ','  shift, and go to state 23


state 16

    9 gid_list: gid .

    $default  reduce using rule 9 (gid_list)


state 17

   13 fn_def: type ID . '(' arg_list ')' '{' l_dec body '}'

    '('  shift, and go to state 24


state 18

   14 main_fn: INTEGER . MAIN '(' ')' '{' l_dec body '}'

    MAIN  shift, and go to state 25


state 19

    1 pgm: gl_dec fn_def main_fn .

    $default  reduce using rule 1 (pgm)


state 20

   11 gid: ID '[' . NUM ']'

    NUM  shift, and go to state 26


state 21

   12 gid: ID '(' . arg_list ')'

    INTEGER  shift, and go to state 27
    BOOLEAN  shift, and go to state 28

    $default  reduce using rule 16 (arg_list)

    arg_list  go to state 29
    arg       go to state 30
    arg_type  go to state 31


state 22

    5 gdec_stat: type gid_list ';' .

    $default  reduce using rule 5 (gdec_stat)


state 23

    8 gid_list: gid_list ',' . gid

    ID  shift, and go to state 14

    gid  go to state 32


state 24

   13 fn_def: type ID '(' . arg_list ')' '{' l_dec body '}'

    INTEGER  shift, and go to state 27
    BOOLEAN  shift, and go to state 28

    $default  reduce using rule 16 (arg_list)

    arg_list  go to state 33
    arg       go to state 30
    arg_type  go to state 31


state 25

   14 main_fn: INTEGER MAIN . '(' ')' '{' l_dec body '}'

    '('  shift, and go to state 34


state 26

   11 gid: ID '[' NUM . ']'

    ']'  shift, and go to state 35


state 27

   18 arg_type: INTEGER .

    $default  reduce using rule 18 (arg_type)


state 28

   19 arg_type: BOOLEAN .

    $default  reduce using rule 19 (arg_type)


state 29

   12 gid: ID '(' arg_list . ')'

    ')'  shift, and go to state 36


state 30

   15 arg_list: arg . ';' arg_list

    ';'  shift, and go to state 37


state 31

   17 arg: arg_type . id_list

    ID   shift, and go to state 38
    '&'  shift, and go to state 39

    id_list  go to state 40


state 32

    8 gid_list: gid_list ',' gid .

    $default  reduce using rule 8 (gid_list)


state 33

   13 fn_def: type ID '(' arg_list . ')' '{' l_dec body '}'

    ')'  shift, and go to state 41


state 34

   14 main_fn: INTEGER MAIN '(' . ')' '{' l_dec body '}'

    ')'  shift, and go to state 42


state 35

   11 gid: ID '[' NUM ']' .

    $default  reduce using rule 11 (gid)


state 36

   12 gid: ID '(' arg_list ')' .

    $default  reduce using rule 12 (gid)


state 37

   15 arg_list: arg ';' . arg_list

    INTEGER  shift, and go to state 27
    BOOLEAN  shift, and go to state 28

    $default  reduce using rule 16 (arg_list)

    arg_list  go to state 43
    arg       go to state 30
    arg_type  go to state 31


state 38

   20 id_list: ID .
   22        | ID . ',' id_list

    ','  shift, and go to state 44

    $default  reduce using rule 20 (id_list)


state 39

   21 id_list: '&' . ID
   23        | '&' . ID ',' id_list

    ID  shift, and go to state 45


state 40

   17 arg: arg_type id_list .

    $default  reduce using rule 17 (arg)


state 41

   13 fn_def: type ID '(' arg_list ')' . '{' l_dec body '}'

    '{'  shift, and go to state 46


state 42

   14 main_fn: INTEGER MAIN '(' ')' . '{' l_dec body '}'

    '{'  shift, and go to state 47


state 43

   15 arg_list: arg ';' arg_list .

    $default  reduce using rule 15 (arg_list)


state 44

   22 id_list: ID ',' . id_list

    ID   shift, and go to state 38
    '&'  shift, and go to state 39

    id_list  go to state 48


state 45

   21 id_list: '&' ID .
   23        | '&' ID . ',' id_list

    ','  shift, and go to state 49

    $default  reduce using rule 21 (id_list)


state 46

   13 fn_def: type ID '(' arg_list ')' '{' . l_dec body '}'

    DECL  shift, and go to state 50

    l_dec  go to state 51


state 47

   14 main_fn: INTEGER MAIN '(' ')' '{' . l_dec body '}'

    DECL  shift, and go to state 50

    l_dec  go to state 52


state 48

   22 id_list: ID ',' id_list .

    $default  reduce using rule 22 (id_list)


state 49

   23 id_list: '&' ID ',' . id_list

    ID   shift, and go to state 38
    '&'  shift, and go to state 39

    id_list  go to state 53


state 50

   24 l_dec: DECL . ldec_list ENDDECL

    INTEGER  shift, and go to state 4
    BOOLEAN  shift, and go to state 5

    $default  reduce using rule 26 (ldec_list)

    type       go to state 54
    ldec_list  go to state 55
    ldec_stat  go to state 56


state 51

   13 fn_def: type ID '(' arg_list ')' '{' l_dec . body '}'

    BGN  shift, and go to state 57

    body  go to state 58


state 52

   14 main_fn: INTEGER MAIN '(' ')' '{' l_dec . body '}'

    BGN  shift, and go to state 57

    body  go to state 59


state 53

   23 id_list: '&' ID ',' id_list .

    $default  reduce using rule 23 (id_list)


state 54

   27 ldec_stat: type . var_list ';'

    ID  shift, and go to state 60

    var_list  go to state 61


state 55

   24 l_dec: DECL ldec_list . ENDDECL

    ENDDECL  shift, and go to state 62


state 56

   25 ldec_list: ldec_stat . ldec_list

    INTEGER  shift, and go to state 4
    BOOLEAN  shift, and go to state 5

    $default  reduce using rule 26 (ldec_list)

    type       go to state 54
    ldec_list  go to state 63
    ldec_stat  go to state 56


state 57

   30 body: BGN . slist END

    ID     shift, and go to state 64
    READ   shift, and go to state 65
    WRITE  shift, and go to state 66
    IF     shift, and go to state 67
    WHILE  shift, and go to state 68

    slist  go to state 69
    stmt   go to state 70


state 58

   13 fn_def: type ID '(' arg_list ')' '{' l_dec body . '}'

    '}'  shift, and go to state 71


state 59

   14 main_fn: INTEGER MAIN '(' ')' '{' l_dec body . '}'

    '}'  shift, and go to state 72


state 60

   28 var_list: ID .

    $default  reduce using rule 28 (var_list)


state 61

   27 ldec_stat: type var_list . ';'
   29 var_list: var_list . ',' ID

    ';'  shift, and go to state 73
    ','  shift, and go to state 74


state 62

   24 l_dec: DECL ldec_list ENDDECL .

    $default  reduce using rule 24 (l_dec)


state 63

   25 ldec_list: ldec_stat ldec_list .

    $default  reduce using rule 25 (ldec_list)


state 64

   33 stmt: ID . '=' expr ';'
   34     | ID . '[' expr ']' '=' expr ';'

    '['  shift, and go to state 75
    '='  shift, and go to state 76


state 65

   35 stmt: READ . '(' ID ')' ';'
   36     | READ . '(' ID '[' expr ']' ')' ';'

    '('  shift, and go to state 77


state 66

   37 stmt: WRITE . '(' expr ')' ';'

    '('  shift, and go to state 78


state 67

   38 stmt: IF . '(' expr ')' THEN slist ENDIF ';'
   39     | IF . '(' expr ')' THEN slist ELSE slist ENDIF ';'

    '('  shift, and go to state 79


state 68

   40 stmt: WHILE . '(' expr ')' DO slist ENDWHILE ';'

    '('  shift, and go to state 80


state 69

   30 body: BGN slist . END
   31 slist: slist . stmt

    ID     shift, and go to state 64
    READ   shift, and go to state 65
    WRITE  shift, and go to state 66
    IF     shift, and go to state 67
    WHILE  shift, and go to state 68
    END    shift, and go to state 81

    stmt  go to state 82


state 70

   32 slist: stmt .

    $default  reduce using rule 32 (slist)


state 71

   13 fn_def: type ID '(' arg_list ')' '{' l_dec body '}' .

    $default  reduce using rule 13 (fn_def)


state 72

   14 main_fn: INTEGER MAIN '(' ')' '{' l_dec body '}' .

    $default  reduce using rule 14 (main_fn)


state 73

   27 ldec_stat: type var_list ';' .

    $default  reduce using rule 27 (ldec_stat)


state 74

   29 var_list: var_list ',' . ID

    ID  shift, and go to state 83


state 75

   34 stmt: ID '[' . expr ']' '=' expr ';'

    NUM    shift, and go to state 84
    ID     shift, and go to state 85
    TRUE   shift, and go to state 86
    FALSE  shift, and go to state 87
    '-'    shift, and go to state 88
    NOT    shift, and go to state 89
    '('    shift, and go to state 90

    expr  go to state 91


state 76

   33 stmt: ID '=' . expr ';'

    NUM    shift, and go to state 84
    ID     shift, and go to state 85
    TRUE   shift, and go to state 86
    FALSE  shift, and go to state 87
    '-'    shift, and go to state 88
    NOT    shift, and go to state 89
    '('    shift, and go to state 90

    expr  go to state 92


state 77

   35 stmt: READ '(' . ID ')' ';'
   36     | READ '(' . ID '[' expr ']' ')' ';'

    ID  shift, and go to state 93


state 78

   37 stmt: WRITE '(' . expr ')' ';'

    NUM    shift, and go to state 84
    ID     shift, and go to state 85
    TRUE   shift, and go to state 86
    FALSE  shift, and go to state 87
    '-'    shift, and go to state 88
    NOT    shift, and go to state 89
    '('    shift, and go to state 90

    expr  go to state 94


state 79

   38 stmt: IF '(' . expr ')' THEN slist ENDIF ';'
   39     | IF '(' . expr ')' THEN slist ELSE slist ENDIF ';'

    NUM    shift, and go to state 84
    ID     shift, and go to state 85
    TRUE   shift, and go to state 86
    FALSE  shift, and go to state 87
    '-'    shift, and go to state 88
    NOT    shift, and go to state 89
    '('    shift, and go to state 90

    expr  go to state 95


state 80

   40 stmt: WHILE '(' . expr ')' DO slist ENDWHILE ';'

    NUM    shift, and go to state 84
    ID     shift, and go to state 85
    TRUE   shift, and go to state 86
    FALSE  shift, and go to state 87
    '-'    shift, and go to state 88
    NOT    shift, and go to state 89
    '('    shift, and go to state 90

    expr  go to state 96


state 81

   30 body: BGN slist END .

    $default  reduce using rule 30 (body)


state 82

   31 slist: slist stmt .

    $default  reduce using rule 31 (slist)


state 83

   29 var_list: var_list ',' ID .

    $default  reduce using rule 29 (var_list)


state 84

   48 expr: NUM .

    $default  reduce using rule 48 (expr)


state 85

   45 expr: ID .
   46     | ID . '[' expr ']'
   47     | ID . '(' act_par ')'

    '['  shift, and go to state 97
    '('  shift, and go to state 98

    $default  reduce using rule 45 (expr)


state 86

   50 expr: TRUE .

    $default  reduce using rule 50 (expr)


state 87

   51 expr: FALSE .

    $default  reduce using rule 51 (expr)


state 88

   49 expr: '-' . NUM

    NUM  shift, and go to state 99


state 89

   66 expr: NOT . expr

    NUM    shift, and go to state 84
    ID     shift, and go to state 85
    TRUE   shift, and go to state 86
    FALSE  shift, and go to state 87
    '-'    shift, and go to state 88
    NOT    shift, and go to state 89
    '('    shift, and go to state 90

    expr  go to state 100


state 90

   57 expr: '(' . expr ')'

    NUM    shift, and go to state 84
    ID     shift, and go to state 85
    TRUE   shift, and go to state 86
    FALSE  shift, and go to state 87
    '-'    shift, and go to state 88
    NOT    shift, and go to state 89
    '('    shift, and go to state 90

    expr  go to state 101


state 91

   34 stmt: ID '[' expr . ']' '=' expr ';'
   52 expr: expr . '+' expr
   53     | expr . '-' expr
   54     | expr . '*' expr
   55     | expr . '/' expr
   56     | expr . '%' expr
   58     | expr . '>' expr
   59     | expr . '<' expr
   60     | expr . LE expr
   61     | expr . GE expr
   62     | expr . EQ expr
   63     | expr . NE expr
   64     | expr . AND expr
   65     | expr . OR expr

    '>'  shift, and go to state 102
    '<'  shift, and go to state 103
    NE   shift, and go to state 104
    LE   shift, and go to state 105
    GE   shift, and go to state 106
    EQ   shift, and go to state 107
    OR   shift, and go to state 108
    AND  shift, and go to state 109
    '+'  shift, and go to state 110
    '-'  shift, and go to state 111
    '*'  shift, and go to state 112
    '/'  shift, and go to state 113
    '%'  shift, and go to state 114
    ']'  shift, and go to state 115


state 92

   33 stmt: ID '=' expr . ';'
   52 expr: expr . '+' expr
   53     | expr . '-' expr
   54     | expr . '*' expr
   55     | expr . '/' expr
   56     | expr . '%' expr
   58     | expr . '>' expr
   59     | expr . '<' expr
   60     | expr . LE expr
   61     | expr . GE expr
   62     | expr . EQ expr
   63     | expr . NE expr
   64     | expr . AND expr
   65     | expr . OR expr

    '>'  shift, and go to state 102
    '<'  shift, and go to state 103
    NE   shift, and go to state 104
    LE   shift, and go to state 105
    GE   shift, and go to state 106
    EQ   shift, and go to state 107
    OR   shift, and go to state 108
    AND  shift, and go to state 109
    '+'  shift, and go to state 110
    '-'  shift, and go to state 111
    '*'  shift, and go to state 112
    '/'  shift, and go to state 113
    '%'  shift, and go to state 114
    ';'  shift, and go to state 116


state 93

   35 stmt: READ '(' ID . ')' ';'
   36     | READ '(' ID . '[' expr ']' ')' ';'

    '['  shift, and go to state 117
    ')'  shift, and go to state 118


state 94

   37 stmt: WRITE '(' expr . ')' ';'
   52 expr: expr . '+' expr
   53     | expr . '-' expr
   54     | expr . '*' expr
   55     | expr . '/' expr
   56     | expr . '%' expr
   58     | expr . '>' expr
   59     | expr . '<' expr
   60     | expr . LE expr
   61     | expr . GE expr
   62     | expr . EQ expr
   63     | expr . NE expr
   64     | expr . AND expr
   65     | expr . OR expr

    '>'  shift, and go to state 102
    '<'  shift, and go to state 103
    NE   shift, and go to state 104
    LE   shift, and go to state 105
    GE   shift, and go to state 106
    EQ   shift, and go to state 107
    OR   shift, and go to state 108
    AND  shift, and go to state 109
    '+'  shift, and go to state 110
    '-'  shift, and go to state 111
    '*'  shift, and go to state 112
    '/'  shift, and go to state 113
    '%'  shift, and go to state 114
    ')'  shift, and go to state 119


state 95

   38 stmt: IF '(' expr . ')' THEN slist ENDIF ';'
   39     | IF '(' expr . ')' THEN slist ELSE slist ENDIF ';'
   52 expr: expr . '+' expr
   53     | expr . '-' expr
   54     | expr . '*' expr
   55     | expr . '/' expr
   56     | expr . '%' expr
   58     | expr . '>' expr
   59     | expr . '<' expr
   60     | expr . LE expr
   61     | expr . GE expr
   62     | expr . EQ expr
   63     | expr . NE expr
   64     | expr . AND expr
   65     | expr . OR expr

    '>'  shift, and go to state 102
    '<'  shift, and go to state 103
    NE   shift, and go to state 104
    LE   shift, and go to state 105
    GE   shift, and go to state 106
    EQ   shift, and go to state 107
    OR   shift, and go to state 108
    AND  shift, and go to state 109
    '+'  shift, and go to state 110
    '-'  shift, and go to state 111
    '*'  shift, and go to state 112
    '/'  shift, and go to state 113
    '%'  shift, and go to state 114
    ')'  shift, and go to state 120


state 96

   40 stmt: WHILE '(' expr . ')' DO slist ENDWHILE ';'
   52 expr: expr . '+' expr
   53     | expr . '-' expr
   54     | expr . '*' expr
   55     | expr . '/' expr
   56     | expr . '%' expr
   58     | expr . '>' expr
   59     | expr . '<' expr
   60     | expr . LE expr
   61     | expr . GE expr
   62     | expr . EQ expr
   63     | expr . NE expr
   64     | expr . AND expr
   65     | expr . OR expr

    '>'  shift, and go to state 102
    '<'  shift, and go to state 103
    NE   shift, and go to state 104
    LE   shift, and go to state 105
    GE   shift, and go to state 106
    EQ   shift, and go to state 107
    OR   shift, and go to state 108
    AND  shift, and go to state 109
    '+'  shift, and go to state 110
    '-'  shift, and go to state 111
    '*'  shift, and go to state 112
    '/'  shift, and go to state 113
    '%'  shift, and go to state 114
    ')'  shift, and go to state 121


state 97

   46 expr: ID '[' . expr ']'

    NUM    shift, and go to state 84
    ID     shift, and go to state 85
    TRUE   shift, and go to state 86
    FALSE  shift, and go to state 87
    '-'    shift, and go to state 88
    NOT    shift, and go to state 89
    '('    shift, and go to state 90

    expr  go to state 122


state 98

   47 expr: ID '(' . act_par ')'

    NUM    shift, and go to state 84
    ID     shift, and go to state 85
    TRUE   shift, and go to state 86
    FALSE  shift, and go to state 87
    '-'    shift, and go to state 88
    NOT    shift, and go to state 89
    '('    shift, and go to state 90
    '&'    shift, and go to state 123

    act_par  go to state 124
    expr     go to state 125


state 99

   49 expr: '-' NUM .

    $default  reduce using rule 49 (expr)


state 100

   52 expr: expr . '+' expr
   53     | expr . '-' expr
   54     | expr . '*' expr
   55     | expr . '/' expr
   56     | expr . '%' expr
   58     | expr . '>' expr
   59     | expr . '<' expr
   60     | expr . LE expr
   61     | expr . GE expr
   62     | expr . EQ expr
   63     | expr . NE expr
   64     | expr . AND expr
   65     | expr . OR expr
   66     | NOT expr .

    $default  reduce using rule 66 (expr)


state 101

   52 expr: expr . '+' expr
   53     | expr . '-' expr
   54     | expr . '*' expr
   55     | expr . '/' expr
   56     | expr . '%' expr
   57     | '(' expr . ')'
   58     | expr . '>' expr
   59     | expr . '<' expr
   60     | expr . LE expr
   61     | expr . GE expr
   62     | expr . EQ expr
   63     | expr . NE expr
   64     | expr . AND expr
   65     | expr . OR expr

    '>'  shift, and go to state 102
    '<'  shift, and go to state 103
    NE   shift, and go to state 104
    LE   shift, and go to state 105
    GE   shift, and go to state 106
    EQ   shift, and go to state 107
    OR   shift, and go to state 108
    AND  shift, and go to state 109
    '+'  shift, and go to state 110
    '-'  shift, and go to state 111
    '*'  shift, and go to state 112
    '/'  shift, and go to state 113
    '%'  shift, and go to state 114
    ')'  shift, and go to state 126


state 102

   58 expr: expr '>' . expr

    NUM    shift, and go to state 84
    ID     shift, and go to state 85
    TRUE   shift, and go to state 86
    FALSE  shift, and go to state 87
    '-'    shift, and go to state 88
    NOT    shift, and go to state 89
    '('    shift, and go to state 90

    expr  go to state 127


state 103

   59 expr: expr '<' . expr

    NUM    shift, and go to state 84
    ID     shift, and go to state 85
    TRUE   shift, and go to state 86
    FALSE  shift, and go to state 87
    '-'    shift, and go to state 88
    NOT    shift, and go to state 89
    '('    shift, and go to state 90

    expr  go to state 128


state 104

   63 expr: expr NE . expr

    NUM    shift, and go to state 84
    ID     shift, and go to state 85
    TRUE   shift, and go to state 86
    FALSE  shift, and go to state 87
    '-'    shift, and go to state 88
    NOT    shift, and go to state 89
    '('    shift, and go to state 90

    expr  go to state 129


state 105

   60 expr: expr LE . expr

    NUM    shift, and go to state 84
    ID     shift, and go to state 85
    TRUE   shift, and go to state 86
    FALSE  shift, and go to state 87
    '-'    shift, and go to state 88
    NOT    shift, and go to state 89
    '('    shift, and go to state 90

    expr  go to state 130


state 106

   61 expr: expr GE . expr

    NUM    shift, and go to state 84
    ID     shift, and go to state 85
    TRUE   shift, and go to state 86
    FALSE  shift, and go to state 87
    '-'    shift, and go to state 88
    NOT    shift, and go to state 89
    '('    shift, and go to state 90

    expr  go to state 131


state 107

   62 expr: expr EQ . expr

    NUM    shift, and go to state 84
    ID     shift, and go to state 85
    TRUE   shift, and go to state 86
    FALSE  shift, and go to state 87
    '-'    shift, and go to state 88
    NOT    shift, and go to state 89
    '('    shift, and go to state 90

    expr  go to state 132


state 108

   65 expr: expr OR . expr

    NUM    shift, and go to state 84
    ID     shift, and go to state 85
    TRUE   shift, and go to state 86
    FALSE  shift, and go to state 87
    '-'    shift, and go to state 88
    NOT    shift, and go to state 89
    '('    shift, and go to state 90

    expr  go to state 133


state 109

   64 expr: expr AND . expr

    NUM    shift, and go to state 84
    ID     shift, and go to state 85
    TRUE   shift, and go to state 86
    FALSE  shift, and go to state 87
    '-'    shift, and go to state 88
    NOT    shift, and go to state 89
    '('    shift, and go to state 90

    expr  go to state 134


state 110

   52 expr: expr '+' . expr

    NUM    shift, and go to state 84
    ID     shift, and go to state 85
    TRUE   shift, and go to state 86
    FALSE  shift, and go to state 87
    '-'    shift, and go to state 88
    NOT    shift, and go to state 89
    '('    shift, and go to state 90

    expr  go to state 135


state 111

   53 expr: expr '-' . expr

    NUM    shift, and go to state 84
    ID     shift, and go to state 85
    TRUE   shift, and go to state 86
    FALSE  shift, and go to state 87
    '-'    shift, and go to state 88
    NOT    shift, and go to state 89
    '('    shift, and go to state 90

    expr  go to state 136


state 112

   54 expr: expr '*' . expr

    NUM    shift, and go to state 84
    ID     shift, and go to state 85
    TRUE   shift, and go to state 86
    FALSE  shift, and go to state 87
    '-'    shift, and go to state 88
    NOT    shift, and go to state 89
    '('    shift, and go to state 90

    expr  go to state 137


state 113

   55 expr: expr '/' . expr

    NUM    shift, and go to state 84
    ID     shift, and go to state 85
    TRUE   shift, and go to state 86
    FALSE  shift, and go to state 87
    '-'    shift, and go to state 88
    NOT    shift, and go to state 89
    '('    shift, and go to state 90

    expr  go to state 138


state 114

   56 expr: expr '%' . expr

    NUM    shift, and go to state 84
    ID     shift, and go to state 85
    TRUE   shift, and go to state 86
    FALSE  shift, and go to state 87
    '-'    shift, and go to state 88
    NOT    shift, and go to state 89
    '('    shift, and go to state 90

    expr  go to state 139


state 115

   34 stmt: ID '[' expr ']' . '=' expr ';'

    '='  shift, and go to state 140


state 116

   33 stmt: ID '=' expr ';' .

    $default  reduce using rule 33 (stmt)


state 117

   36 stmt: READ '(' ID '[' . expr ']' ')' ';'

    NUM    shift, and go to state 84
    ID     shift, and go to state 85
    TRUE   shift, and go to state 86
    FALSE  shift, and go to state 87
    '-'    shift, and go to state 88
    NOT    shift, and go to state 89
    '('    shift, and go to state 90

    expr  go to state 141


state 118

   35 stmt: READ '(' ID ')' . ';'

    ';'  shift, and go to state 142


state 119

   37 stmt: WRITE '(' expr ')' . ';'

    ';'  shift, and go to state 143


state 120

   38 stmt: IF '(' expr ')' . THEN slist ENDIF ';'
   39     | IF '(' expr ')' . THEN slist ELSE slist ENDIF ';'

    THEN  shift, and go to state 144


state 121

   40 stmt: WHILE '(' expr ')' . DO slist ENDWHILE ';'

    DO  shift, and go to state 145


state 122

   46 expr: ID '[' expr . ']'
   52     | expr . '+' expr
   53     | expr . '-' expr
   54     | expr . '*' expr
   55     | expr . '/' expr
   56     | expr . '%' expr
   58     | expr . '>' expr
   59     | expr . '<' expr
   60     | expr . LE expr
   61     | expr . GE expr
   62     | expr . EQ expr
   63     | expr . NE expr
   64     | expr . AND expr
   65     | expr . OR expr

    '>'  shift, and go to state 102
    '<'  shift, and go to state 103
    NE   shift, and go to state 104
    LE   shift, and go to state 105
    GE   shift, and go to state 106
    EQ   shift, and go to state 107
    OR   shift, and go to state 108
    AND  shift, and go to state 109
    '+'  shift, and go to state 110
    '-'  shift, and go to state 111
    '*'  shift, and go to state 112
    '/'  shift, and go to state 113
    '%'  shift, and go to state 114
    ']'  shift, and go to state 146


state 123

   41 act_par: '&' . ID
   43        | '&' . ID ',' act_par

    ID  shift, and go to state 147


state 124

   47 expr: ID '(' act_par . ')'

    ')'  shift, and go to state 148


state 125

   42 act_par: expr .
   44        | expr . ',' act_par
   52 expr: expr . '+' expr
   53     | expr . '-' expr
   54     | expr . '*' expr
   55     | expr . '/' expr
   56     | expr . '%' expr
   58     | expr . '>' expr
   59     | expr . '<' expr
   60     | expr . LE expr
   61     | expr . GE expr
   62     | expr . EQ expr
   63     | expr . NE expr
   64     | expr . AND expr
   65     | expr . OR expr

    '>'  shift, and go to state 102
    '<'  shift, and go to state 103
    NE   shift, and go to state 104
    LE   shift, and go to state 105
    GE   shift, and go to state 106
    EQ   shift, and go to state 107
    OR   shift, and go to state 108
    AND  shift, and go to state 109
    '+'  shift, and go to state 110
    '-'  shift, and go to state 111
    '*'  shift, and go to state 112
    '/'  shift, and go to state 113
    '%'  shift, and go to state 114
    ','  shift, and go to state 149

    $default  reduce using rule 42 (act_par)


state 126

   57 expr: '(' expr ')' .

    $default  reduce using rule 57 (expr)


state 127

   52 expr: expr . '+' expr
   53     | expr . '-' expr
   54     | expr . '*' expr
   55     | expr . '/' expr
   56     | expr . '%' expr
   58     | expr . '>' expr
   58     | expr '>' expr .
   59     | expr . '<' expr
   60     | expr . LE expr
   61     | expr . GE expr
   62     | expr . EQ expr
   63     | expr . NE expr
   64     | expr . AND expr
   65     | expr . OR expr

    OR   shift, and go to state 108
    AND  shift, and go to state 109
    '+'  shift, and go to state 110
    '-'  shift, and go to state 111
    '*'  shift, and go to state 112
    '/'  shift, and go to state 113
    '%'  shift, and go to state 114

    '>'  error (nonassociative)
    '<'  error (nonassociative)
    NE   error (nonassociative)
    LE   error (nonassociative)
    GE   error (nonassociative)
    EQ   error (nonassociative)

    $default  reduce using rule 58 (expr)


state 128

   52 expr: expr . '+' expr
   53     | expr . '-' expr
   54     | expr . '*' expr
   55     | expr . '/' expr
   56     | expr . '%' expr
   58     | expr . '>' expr
   59     | expr . '<' expr
   59     | expr '<' expr .
   60     | expr . LE expr
   61     | expr . GE expr
   62     | expr . EQ expr
   63     | expr . NE expr
   64     | expr . AND expr
   65     | expr . OR expr

    OR   shift, and go to state 108
    AND  shift, and go to state 109
    '+'  shift, and go to state 110
    '-'  shift, and go to state 111
    '*'  shift, and go to state 112
    '/'  shift, and go to state 113
    '%'  shift, and go to state 114

    '>'  error (nonassociative)
    '<'  error (nonassociative)
    NE   error (nonassociative)
    LE   error (nonassociative)
    GE   error (nonassociative)
    EQ   error (nonassociative)

    $default  reduce using rule 59 (expr)


state 129

   52 expr: expr . '+' expr
   53     | expr . '-' expr
   54     | expr . '*' expr
   55     | expr . '/' expr
   56     | expr . '%' expr
   58     | expr . '>' expr
   59     | expr . '<' expr
   60     | expr . LE expr
   61     | expr . GE expr
   62     | expr . EQ expr
   63     | expr . NE expr
   63     | expr NE expr .
   64     | expr . AND expr
   65     | expr . OR expr

    OR   shift, and go to state 108
    AND  shift, and go to state 109
    '+'  shift, and go to state 110
    '-'  shift, and go to state 111
    '*'  shift, and go to state 112
    '/'  shift, and go to state 113
    '%'  shift, and go to state 114

    '>'  error (nonassociative)
    '<'  error (nonassociative)
    NE   error (nonassociative)
    LE   error (nonassociative)
    GE   error (nonassociative)
    EQ   error (nonassociative)

    $default  reduce using rule 63 (expr)


state 130

   52 expr: expr . '+' expr
   53     | expr . '-' expr
   54     | expr . '*' expr
   55     | expr . '/' expr
   56     | expr . '%' expr
   58     | expr . '>' expr
   59     | expr . '<' expr
   60     | expr . LE expr
   60     | expr LE expr .
   61     | expr . GE expr
   62     | expr . EQ expr
   63     | expr . NE expr
   64     | expr . AND expr
   65     | expr . OR expr

    OR   shift, and go to state 108
    AND  shift, and go to state 109
    '+'  shift, and go to state 110
    '-'  shift, and go to state 111
    '*'  shift, and go to state 112
    '/'  shift, and go to state 113
    '%'  shift, and go to state 114

    '>'  error (nonassociative)
    '<'  error (nonassociative)
    NE   error (nonassociative)
    LE   error (nonassociative)
    GE   error (nonassociative)
    EQ   error (nonassociative)

    $default  reduce using rule 60 (expr)


state 131

   52 expr: expr . '+' expr
   53     | expr . '-' expr
   54     | expr . '*' expr
   55     | expr . '/' expr
   56     | expr . '%' expr
   58     | expr . '>' expr
   59     | expr . '<' expr
   60     | expr . LE expr
   61     | expr . GE expr
   61     | expr GE expr .
   62     | expr . EQ expr
   63     | expr . NE expr
   64     | expr . AND expr
   65     | expr . OR expr

    OR   shift, and go to state 108
    AND  shift, and go to state 109
    '+'  shift, and go to state 110
    '-'  shift, and go to state 111
    '*'  shift, and go to state 112
    '/'  shift, and go to state 113
    '%'  shift, and go to state 114

    '>'  error (nonassociative)
    '<'  error (nonassociative)
    NE   error (nonassociative)
    LE   error (nonassociative)
    GE   error (nonassociative)
    EQ   error (nonassociative)

    $default  reduce using rule 61 (expr)


state 132

   52 expr: expr . '+' expr
   53     | expr . '-' expr
   54     | expr . '*' expr
   55     | expr . '/' expr
   56     | expr . '%' expr
   58     | expr . '>' expr
   59     | expr . '<' expr
   60     | expr . LE expr
   61     | expr . GE expr
   62     | expr . EQ expr
   62     | expr EQ expr .
   63     | expr . NE expr
   64     | expr . AND expr
   65     | expr . OR expr

    OR   shift, and go to state 108
    AND  shift, and go to state 109
    '+'  shift, and go to state 110
    '-'  shift, and go to state 111
    '*'  shift, and go to state 112
    '/'  shift, and go to state 113
    '%'  shift, and go to state 114

    '>'  error (nonassociative)
    '<'  error (nonassociative)
    NE   error (nonassociative)
    LE   error (nonassociative)
    GE   error (nonassociative)
    EQ   error (nonassociative)

    $default  reduce using rule 62 (expr)


state 133

   52 expr: expr . '+' expr
   53     | expr . '-' expr
   54     | expr . '*' expr
   55     | expr . '/' expr
   56     | expr . '%' expr
   58     | expr . '>' expr
   59     | expr . '<' expr
   60     | expr . LE expr
   61     | expr . GE expr
   62     | expr . EQ expr
   63     | expr . NE expr
   64     | expr . AND expr
   65     | expr . OR expr
   65     | expr OR expr .

    '+'  shift, and go to state 110
    '-'  shift, and go to state 111
    '*'  shift, and go to state 112
    '/'  shift, and go to state 113
    '%'  shift, and go to state 114

    $default  reduce using rule 65 (expr)


state 134

   52 expr: expr . '+' expr
   53     | expr . '-' expr
   54     | expr . '*' expr
   55     | expr . '/' expr
   56     | expr . '%' expr
   58     | expr . '>' expr
   59     | expr . '<' expr
   60     | expr . LE expr
   61     | expr . GE expr
   62     | expr . EQ expr
   63     | expr . NE expr
   64     | expr . AND expr
   64     | expr AND expr .
   65     | expr . OR expr

    '+'  shift, and go to state 110
    '-'  shift, and go to state 111
    '*'  shift, and go to state 112
    '/'  shift, and go to state 113
    '%'  shift, and go to state 114

    $default  reduce using rule 64 (expr)


state 135

   52 expr: expr . '+' expr
   52     | expr '+' expr .
   53     | expr . '-' expr
   54     | expr . '*' expr
   55     | expr . '/' expr
   56     | expr . '%' expr
   58     | expr . '>' expr
   59     | expr . '<' expr
   60     | expr . LE expr
   61     | expr . GE expr
   62     | expr . EQ expr
   63     | expr . NE expr
   64     | expr . AND expr
   65     | expr . OR expr

    '*'  shift, and go to state 112
    '/'  shift, and go to state 113
    '%'  shift, and go to state 114

    $default  reduce using rule 52 (expr)


state 136

   52 expr: expr . '+' expr
   53     | expr . '-' expr
   53     | expr '-' expr .
   54     | expr . '*' expr
   55     | expr . '/' expr
   56     | expr . '%' expr
   58     | expr . '>' expr
   59     | expr . '<' expr
   60     | expr . LE expr
   61     | expr . GE expr
   62     | expr . EQ expr
   63     | expr . NE expr
   64     | expr . AND expr
   65     | expr . OR expr

    '*'  shift, and go to state 112
    '/'  shift, and go to state 113
    '%'  shift, and go to state 114

    $default  reduce using rule 53 (expr)


state 137

   52 expr: expr . '+' expr
   53     | expr . '-' expr
   54     | expr . '*' expr
   54     | expr '*' expr .
   55     | expr . '/' expr
   56     | expr . '%' expr
   58     | expr . '>' expr
   59     | expr . '<' expr
   60     | expr . LE expr
   61     | expr . GE expr
   62     | expr . EQ expr
   63     | expr . NE expr
   64     | expr . AND expr
   65     | expr . OR expr

    $default  reduce using rule 54 (expr)


state 138

   52 expr: expr . '+' expr
   53     | expr . '-' expr
   54     | expr . '*' expr
   55     | expr . '/' expr
   55     | expr '/' expr .
   56     | expr . '%' expr
   58     | expr . '>' expr
   59     | expr . '<' expr
   60     | expr . LE expr
   61     | expr . GE expr
   62     | expr . EQ expr
   63     | expr . NE expr
   64     | expr . AND expr
   65     | expr . OR expr

    $default  reduce using rule 55 (expr)


state 139

   52 expr: expr . '+' expr
   53     | expr . '-' expr
   54     | expr . '*' expr
   55     | expr . '/' expr
   56     | expr . '%' expr
   56     | expr '%' expr .
   58     | expr . '>' expr
   59     | expr . '<' expr
   60     | expr . LE expr
   61     | expr . GE expr
   62     | expr . EQ expr
   63     | expr . NE expr
   64     | expr . AND expr
   65     | expr . OR expr

    $default  reduce using rule 56 (expr)


state 140

   34 stmt: ID '[' expr ']' '=' . expr ';'

    NUM    shift, and go to state 84
    ID     shift, and go to state 85
    TRUE   shift, and go to state 86
    FALSE  shift, and go to state 87
    '-'    shift, and go to state 88
    NOT    shift, and go to state 89
    '('    shift, and go to state 90

    expr  go to state 150


state 141

   36 stmt: READ '(' ID '[' expr . ']' ')' ';'
   52 expr: expr . '+' expr
   53     | expr . '-' expr
   54     | expr . '*' expr
   55     | expr . '/' expr
   56     | expr . '%' expr
   58     | expr . '>' expr
   59     | expr . '<' expr
   60     | expr . LE expr
   61     | expr . GE expr
   62     | expr . EQ expr
   63     | expr . NE expr
   64     | expr . AND expr
   65     | expr . OR expr

    '>'  shift, and go to state 102
    '<'  shift, and go to state 103
    NE   shift, and go to state 104
    LE   shift, and go to state 105
    GE   shift, and go to state 106
    EQ   shift, and go to state 107
    OR   shift, and go to state 108
    AND  shift, and go to state 109
    '+'  shift, and go to state 110
    '-'  shift, and go to state 111
    '*'  shift, and go to state 112
    '/'  shift, and go to state 113
    '%'  shift, and go to state 114
    ']'  shift, and go to state 151


state 142

   35 stmt: READ '(' ID ')' ';' .

    $default  reduce using rule 35 (stmt)


state 143

   37 stmt: WRITE '(' expr ')' ';' .

    $default  reduce using rule 37 (stmt)


state 144

   38 stmt: IF '(' expr ')' THEN . slist ENDIF ';'
   39     | IF '(' expr ')' THEN . slist ELSE slist ENDIF ';'

    ID     shift, and go to state 64
    READ   shift, and go to state 65
    WRITE  shift, and go to state 66
    IF     shift, and go to state 67
    WHILE  shift, and go to state 68

    slist  go to state 152
    stmt   go to state 70


state 145

   40 stmt: WHILE '(' expr ')' DO . slist ENDWHILE ';'

    ID     shift, and go to state 64
    READ   shift, and go to state 65
    WRITE  shift, and go to state 66
    IF     shift, and go to state 67
    WHILE  shift, and go to state 68

    slist  go to state 153
    stmt   go to state 70


state 146

   46 expr: ID '[' expr ']' .

    $default  reduce using rule 46 (expr)


state 147

   41 act_par: '&' ID .
   43        | '&' ID . ',' act_par

    ','  shift, and go to state 154

    $default  reduce using rule 41 (act_par)


state 148

   47 expr: ID '(' act_par ')' .

    $default  reduce using rule 47 (expr)


state 149

   44 act_par: expr ',' . act_par

    NUM    shift, and go to state 84
    ID     shift, and go to state 85
    TRUE   shift, and go to state 86
    FALSE  shift, and go to state 87
    '-'    shift, and go to state 88
    NOT    shift, and go to state 89
    '('    shift, and go to state 90
    '&'    shift, and go to state 123

    act_par  go to state 155
    expr     go to state 125


state 150

   34 stmt: ID '[' expr ']' '=' expr . ';'
   52 expr: expr . '+' expr
   53     | expr . '-' expr
   54     | expr . '*' expr
   55     | expr . '/' expr
   56     | expr . '%' expr
   58     | expr . '>' expr
   59     | expr . '<' expr
   60     | expr . LE expr
   61     | expr . GE expr
   62     | expr . EQ expr
   63     | expr . NE expr
   64     | expr . AND expr
   65     | expr . OR expr

    '>'  shift, and go to state 102
    '<'  shift, and go to state 103
    NE   shift, and go to state 104
    LE   shift, and go to state 105
    GE   shift, and go to state 106
    EQ   shift, and go to state 107
    OR   shift, and go to state 108
    AND  shift, and go to state 109
    '+'  shift, and go to state 110
    '-'  shift, and go to state 111
    '*'  shift, and go to state 112
    '/'  shift, and go to state 113
    '%'  shift, and go to state 114
    ';'  shift, and go to state 156


state 151

   36 stmt: READ '(' ID '[' expr ']' . ')' ';'

    ')'  shift, and go to state 157


state 152

   31 slist: slist . stmt
   38 stmt: IF '(' expr ')' THEN slist . ENDIF ';'
   39     | IF '(' expr ')' THEN slist . ELSE slist ENDIF ';'

    ID     shift, and go to state 64
    READ   shift, and go to state 65
    WRITE  shift, and go to state 66
    IF     shift, and go to state 67
    ELSE   shift, and go to state 158
    ENDIF  shift, and go to state 159
    WHILE  shift, and go to state 68

    stmt  go to state 82


state 153

   31 slist: slist . stmt
   40 stmt: WHILE '(' expr ')' DO slist . ENDWHILE ';'

    ID        shift, and go to state 64
    READ      shift, and go to state 65
    WRITE     shift, and go to state 66
    IF        shift, and go to state 67
    WHILE     shift, and go to state 68
    ENDWHILE  shift, and go to state 160

    stmt  go to state 82


state 154

   43 act_par: '&' ID ',' . act_par

    NUM    shift, and go to state 84
    ID     shift, and go to state 85
    TRUE   shift, and go to state 86
    FALSE  shift, and go to state 87
    '-'    shift, and go to state 88
    NOT    shift, and go to state 89
    '('    shift, and go to state 90
    '&'    shift, and go to state 123

    act_par  go to state 161
    expr     go to state 125


state 155

   44 act_par: expr ',' act_par .

    $default  reduce using rule 44 (act_par)


state 156

   34 stmt: ID '[' expr ']' '=' expr ';' .

    $default  reduce using rule 34 (stmt)


state 157

   36 stmt: READ '(' ID '[' expr ']' ')' . ';'

    ';'  shift, and go to state 162


state 158

   39 stmt: IF '(' expr ')' THEN slist ELSE . slist ENDIF ';'

    ID     shift, and go to state 64
    READ   shift, and go to state 65
    WRITE  shift, and go to state 66
    IF     shift, and go to state 67
    WHILE  shift, and go to state 68

    slist  go to state 163
    stmt   go to state 70


state 159

   38 stmt: IF '(' expr ')' THEN slist ENDIF . ';'

    ';'  shift, and go to state 164


state 160

   40 stmt: WHILE '(' expr ')' DO slist ENDWHILE . ';'

    ';'  shift, and go to state 165


state 161

   43 act_par: '&' ID ',' act_par .

    $default  reduce using rule 43 (act_par)


state 162

   36 stmt: READ '(' ID '[' expr ']' ')' ';' .

    $default  reduce using rule 36 (stmt)


state 163

   31 slist: slist . stmt
   39 stmt: IF '(' expr ')' THEN slist ELSE slist . ENDIF ';'

    ID     shift, and go to state 64
    READ   shift, and go to state 65
    WRITE  shift, and go to state 66
    IF     shift, and go to state 67
    ENDIF  shift, and go to state 166
    WHILE  shift, and go to state 68

    stmt  go to state 82


state 164

   38 stmt: IF '(' expr ')' THEN slist ENDIF ';' .

    $default  reduce using rule 38 (stmt)


state 165

   40 stmt: WHILE '(' expr ')' DO slist ENDWHILE ';' .

    $default  reduce using rule 40 (stmt)


state 166

   39 stmt: IF '(' expr ')' THEN slist ELSE slist ENDIF . ';'

    ';'  shift, and go to state 167


state 167

   39 stmt: IF '(' expr ')' THEN slist ELSE slist ENDIF ';' .

    $default  reduce using rule 39 (stmt)
